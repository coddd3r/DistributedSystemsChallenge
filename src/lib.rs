use std::{
    fmt::Debug,
    io::{BufRead, StdoutLock, Write},
};

use anyhow::Context;
use serde::{de::DeserializeOwned, Deserialize, Serialize};

//basic skeleton of a network message
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Message<Payload> {
    pub src: String,
    pub dest: String,
    pub body: Body<Payload>,
}

impl<Payload> Message<Payload> {
    pub fn derive_response(self, id: Option<&mut usize>) -> Self {
        Self {
            src: self.dest,
            dest: self.src,
            body: Body {
                id: id.map(|id| {
                    let mid = *id;
                    *id += 1;
                    mid
                }),
                in_reply_to: self.body.id,
                payload: self.body.payload,
            },
        }
    }

    pub fn send_self(&self, output: &mut impl Write) -> anyhow::Result<()>
    where
        Payload: Serialize,
    {
        serde_json::to_writer(&mut *output, self).context("error serializing message response")?;
        output.write_all(b"\n").context("write trailing newline")?;
        Ok(())
    }
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Body<Payload> {
    #[serde(rename = "msg_id")]
    pub id: Option<usize>,
    pub in_reply_to: Option<usize>,

    //type of message
    #[serde(flatten)]
    pub payload: Payload,
}

//handle init message that sends a list of nodes and this current nodes id
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Init {
    pub node_id: String,
    pub node_ids: Vec<String>,
}

//init message types(received, ok-response)
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(tag = "type")]
#[serde(rename_all = "snake_case")]
enum InitPayload {
    Init(Init),
    InitOk,
}

//types of events:from stdin or generated by our node or stdin fd closes
#[derive(Debug, Clone)]
// #[serde(tag = "type")]
// #[serde(rename_all = "snake_case")]
pub enum Event<Payload, InjectedPayload = ()> {
    Message(Message<Payload>),
    Injected(InjectedPayload),
    EOF,
}

pub trait Node<S, Payload, InjectedPayload = ()> {
    fn from_init(
        state: S,
        init: Init,
        inject: std::sync::mpsc::Sender<Event<Payload, InjectedPayload>>,
    ) -> anyhow::Result<Self>
    where
        Self: Sized;

    fn handle_input(
        &mut self,
        input: Event<Payload, InjectedPayload>,
        output: &mut StdoutLock,
    ) -> anyhow::Result<()>;
}

//Generics: S=State, N:Node, P:Payload
//take in shared state and manipulate according to stdin input
pub fn main_loop<S, N, P, IP>(initial_state: S) -> anyhow::Result<()>
where
    P: DeserializeOwned + Send + 'static, //send for channels, static to live in different threads
    N: Node<S, P, IP>,
    IP: Send + 'static,
{
    //channel sender, receiver for nodes to inject messages
    let (tx, rx) = std::sync::mpsc::channel();
    //configure io with serde
    let stdin = std::io::stdin().lock();
    let mut stdin = stdin.lines();
    let mut stdout = std::io::stdout().lock();

    let init_msg: Message<InitPayload> = serde_json::from_str(
        &stdin
            .next()
            .expect("no init message received")
            .context("failed to read init message")?,
    )
    .context("failed to deserialize input message")?;

    let InitPayload::Init(init) = init_msg.body.payload else {
        panic!("NO INIT MESSAGE RECEIVED");
    };

    // println!("init : {:?}", &init);
    let mut node: N =
        Node::from_init(initial_state, init, tx.clone()).context("node initialization failed")?;

    let reply = Message {
        src: init_msg.dest,
        dest: init_msg.src,
        body: Body {
            //message id 0 reserved for init message
            id: Some(0),
            in_reply_to: init_msg.body.id,
            payload: InitPayload::InitOk,
        },
    };
    serde_json::to_writer(&mut stdout, &reply).context("serialize response to init")?;
    //flush STDOUT with a new line
    stdout.write_all(b"\n").context("write extra newline")?;
    //drop stdin after init message then add threads to handle gossips
    drop(stdin);

    //create a clone of the sender for each thread handling input from stdin
    let handle = std::thread::spawn(move || {
        //moved stdin into thread since stdinlock is not 'Send'
        let stdin = std::io::stdin().lock();
        for line in stdin.lines() {
            let line = line.context("input from stdin could  not be read")?;
            // eprintln!("got Message {}", &line);
            let input: Message<P> =
                serde_json::from_str(&line).context("could not deserialize input line")?;
            if let Err(_) = tx.send(Event::Message(input)) {
                //channel is closed or some other error
                return Ok::<_, anyhow::Error>(());
            };
        }
        let _ = tx.send(Event::EOF);

        Ok(())
    });

    //for every transmission received from the channel
    for input in rx {
        node.handle_input(input, &mut stdout)
            .context("Node failed to handle input")?
    }
    handle
        .join()
        .expect("stdin thread panicked")
        .context("STDIN thread erred")?;

    Ok(())
}
